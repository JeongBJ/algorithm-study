package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class BOJ_13335 {
 
    static Queue<Integer> queue;
    static int n,w,L;
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        Queue<Integer> trucks = new LinkedList<>();
        st = new StringTokenizer(br.readLine());
        queue = new LinkedList<>();
        
        //다리를 건너는 트럭의 수
        n = Integer.parseInt(st.nextToken());
        //다리의 길이
        w = Integer.parseInt(st.nextToken());
        //다리의 최대하중
        L = Integer.parseInt(st.nextToken());
        
        st = new StringTokenizer(br.readLine());
        
        for(int i=0;i<n;i++){
            trucks.offer(Integer.parseInt(st.nextToken()));
        }
        
        int time = 0;
        int bw = 0;
        
        for(int i=0;i<w;i++) {
        	queue.offer(0);
        
        
        while(!queue.isEmpty()) {
        	time++;
        	bw-=queue.poll();
        	if(!trucks.isEmpty()) {
        		if(trucks.peek()+bw<=L) {
        			bw+=trucks.peek();
        			queue.offer(trucks.poll());
        		}
        		else {
        			queue.offer(0);
        		}
        	}
        	
        }
        
        System.out.println(time);
        
    }

}
