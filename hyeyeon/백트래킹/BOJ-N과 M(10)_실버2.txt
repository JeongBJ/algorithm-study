import java.io.*;
import java.util.*;

public class Main {

    static int N,M;
    static int[] num, per;
    static boolean[] visited;
    static StringBuilder sb = new StringBuilder();
    static HashSet<String> hash = new HashSet<>();

    static void permutation(int x){
        if(x==M){
            //동작 수행
            int[] tmp = new int[M];
            for(int i=0;i<M;i++){
                tmp[i] = per[i];
            }
            Arrays.sort(tmp);
            StringBuilder sb2 = new StringBuilder();
            for(int i=0;i<M;i++){
                sb2.append(tmp[i]).append(" ");
            }
            String tmp2 = sb2.toString();
            if(!hash.contains(tmp2)){
                sb.append(tmp2).append("\n");
                hash.add(tmp2);
            }
            return;
        }
        for(int i=0;i<N;i++){
            if(!visited[i]){
                visited[i] = true;
                per[x] = num[i];
                permutation(x+1);
                visited[i] = false;
            }
        }

    }


    public static void main(String[] args) throws IOException{

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        num = new int[N];
        per = new int[M];
        visited = new boolean[N];

        st = new StringTokenizer(br.readLine());
        for(int i=0;i<N;i++){
            num[i] = Integer.parseInt(st.nextToken());
        }
        //Integer[] tmp = Arrays.stream(num).boxed().toArray(Integer[]::new);
        //Arrays.sort(tmp,Collections.reverseOrder());
        Arrays.sort(num);

        permutation(0);
        System.out.println(sb.toString());

    }
}



